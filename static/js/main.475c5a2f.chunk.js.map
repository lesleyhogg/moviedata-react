{"version":3,"sources":["components/MovieCard.js","components/App.js","serviceWorker.js","index.js"],"names":["MovieCard","rating","this","props","movie","vote_average","react_default","a","createElement","className","key","id","src","concat","poster_path","alt","title","original_title","release_date","overview","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","region","regionName","regions","regionsMap","_this2","console","log","url","process","$","ajax","success","searchResults","setState","results","error","xhr","status","err","loadMovie","loadRegions","_this3","reduce","acc","current","alpha2Code","prevProps","prevState","_this4","name","onChange","e","target","value","map","components_MovieCard","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQA0BeA,mLAtBX,IAAIC,EASJ,OALEA,EADoC,OAAlCC,KAAKC,MAAMC,MAAMC,aACVH,KAAKC,MAAMC,MAAMC,aAHX,uBASfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAKR,KAAKC,MAAMC,MAAMO,IAC5CL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeG,IAAK,kCAAkCC,OAAOX,KAAKC,MAAMC,MAAMU,aAAcC,IAAKb,KAAKC,MAAMC,MAAMY,MAAMH,OAAO,aAC5IP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcP,KAAKC,MAAMC,MAAMY,OAC7CV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAAb,mBAAyDP,KAAKC,MAAMC,MAAMa,gBAC1EX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAAb,iBAAuDP,KAAKC,MAAMC,MAAMc,cACxEZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAAb,+BAAqER,GACrEK,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaP,KAAKC,MAAMC,MAAMe,kBAlB3BC,6BC2FTC,qBAtFb,SAAAA,EAAalB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArB,KAAAmB,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAArB,KAAAqB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAzB,KAAMC,KACDyB,MAAQ,CACXC,OAAQ,KACRC,WAAY,SACZC,QAAS,GACTC,WAAY,MANIV,2EAUR,IAAAW,EAAA/B,KACVgC,QAAQC,IAAI,2BACZ,IACMC,EAAG,0DAAAvB,OADOwB,mCACP,YAAAxB,OAA+EX,KAAK0B,MAAMC,QACnGS,IAAEC,KAAK,CACLH,IAAKA,EACLI,QAAS,SAACC,GACRP,QAAQC,IAAI,8BACZF,EAAKS,SAAS,CAACtC,MAAOqC,EAAcE,WAEtCC,MAAO,SAACC,EAAKC,EAAQC,GACnBb,QAAQU,MAAM,uEAMlB1C,KAAK8C,YACL9C,KAAK+C,oDAGO,IAAAC,EAAAhD,KACZgC,QAAQC,IAAI,wCAEZG,IAAEC,KAAK,CACLH,IAFO,uCAGPI,QAAS,SAACC,GACRP,QAAQC,IAAI,0CACZ,IAAMH,EAAaS,EAAcU,OAAO,SAACC,EAAKC,GAE5C,OADAD,EAAIC,EAAQC,YAAcD,EACnBD,GACJ,IAELF,EAAKR,SAAS,CAACX,QAASU,EAAeT,WAAYA,KAErDY,MAAO,SAACC,EAAKC,EAAQC,GACnBb,QAAQU,MAAM,6EAKDW,EAAWC,GACxBtD,KAAK0B,MAAMC,SAAW2B,EAAU3B,QAClC3B,KAAK8C,6CAIA,IAAAS,EAAAvD,KACP,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,gCAAwBN,KAAK0B,MAAMI,YAAc9B,KAAK0B,MAAMI,WAAW9B,KAAK0B,MAAMC,QAAQ6B,QAEhGpD,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UACNL,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,UAAQmD,SAAU,SAAAC,GAAC,OACjBH,EAAKf,SAAS,CAACb,OAAQ+B,EAAEC,OAAOC,UAG9B5D,KAAK0B,MAAMG,QAAQgC,IAAI,SAAAlC,GAAM,OAAIvB,EAAAC,EAAAC,cAAA,UAAQE,IAAKmB,EAAOyB,WAAYQ,MAAOjC,EAAOyB,YAAazB,EAAO6B,UAIzGpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZP,KAAK0B,MAAMxB,OAASF,KAAK0B,MAAMxB,MAAM2D,IAAI,SAAA3D,GAAK,OAAIE,EAAAC,EAAAC,cAACwD,EAAD,CAAWtD,IAAKN,EAAMO,GAAIP,MAAOA,eA/E5EgB,cCME6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.475c5a2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass MovieCard extends Component {\n  render() {\n    let rating;\n    const noRating = \"No rating available.\";\n\n    if (this.props.movie.vote_average !== null) {\n      rating = this.props.movie.vote_average;\n    } else {\n      rating = noRating;\n    }\n\n    return(\n      <div className=\"card\" key={this.props.movie.id}>\n      <img className=\"card-img-top\" src={'https://image.tmdb.org/t/p/w500'.concat(this.props.movie.poster_path)} alt={this.props.movie.title.concat(' poster')}></img>\n        <h3 className=\"card-title\">{this.props.movie.title}</h3>\n        <p className=\"card-subtitle text-muted\">Original Title: {this.props.movie.original_title}</p>\n        <p className=\"card-subtitle text-muted\">Release Date: {this.props.movie.release_date}</p>\n        <p className=\"card-subtitle text-muted\">Average Rating (out of 10): {rating}</p>\n        <p className=\"card-text\">{this.props.movie.overview}</p>\n      </div>\n    )\n  }\n}\n\nexport default MovieCard;\n","import React, { Component } from 'react';\nimport MovieCard from './MovieCard';\nimport $ from 'jquery';\nimport '../css/App.css';\nimport '../css/movies.css';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      region: 'GR',\n      regionName: 'Greece',\n      regions: [],\n      regionsMap: null\n    };\n  }\n\n  loadMovie() {\n    console.log(\"Fetching JSON from TMDB\");\n    const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n    const url = `https://api.themoviedb.org/3/movie/now_playing?api_key=${API_KEY}&region=${this.state.region}`;\n    $.ajax({\n      url: url,\n      success: (searchResults) => {\n        console.log(\"Fetched data successfully!\");\n        this.setState({movie: searchResults.results});\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Failed to fetch data\")\n      }\n    })\n  }\n\n  componentDidMount() {\n    this.loadMovie();\n    this.loadRegions();\n  }\n\n  loadRegions() {\n    console.log(\"Fetching JSON from REST Countries EU\");\n    const url = `https://restcountries.eu/rest/v2/all`;\n    $.ajax({\n      url: url,\n      success: (searchResults) => {\n        console.log(\"Region data fetched data successfully!\");\n        const regionsMap = searchResults.reduce((acc, current) => {\n          acc[current.alpha2Code] = current;\n          return acc;\n          }, {}\n        )\n        this.setState({regions: searchResults, regionsMap: regionsMap});\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Failed to fetch region data\")\n      }\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.region !== prevState.region) {\n      this.loadMovie();\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1>MovieData</h1>\n          <p>A React Project</p>\n        </div>\n        <div className=\"jumbotron\">\n          <h2><strong>Now Playing in {this.state.regionsMap && this.state.regionsMap[this.state.region].name}</strong></h2>\n        </div>\n        <div id=\"search\">\n          <p>Select a different country:</p>\n          <select onChange={e =>\n            this.setState({region: e.target.value})\n          }>\n            {\n              this.state.regions.map(region => <option key={region.alpha2Code} value={region.alpha2Code}>{region.name}</option>)\n            }\n          </select>\n        </div>\n        <div className=\"movies\">\n          {this.state.movie && this.state.movie.map(movie => <MovieCard key={movie.id} movie={movie} />)}\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/App.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}